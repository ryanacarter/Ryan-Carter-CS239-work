package Controller;

import Model.AudioList;
import View.*;

public class Search
{
    private AudioList searchList;
    
    /**
     * default constructor
     */
    public Search(AudioList list)
    {
        searchList = list;
        
    } // end method
    
    
/***************************** Public Methods*********************************/
    
    /**
     * 
     * @param searchFor
     * @param param
     * @param placeHolder
     */
    public AudioList addFiles( String[] searchFor, String param )
    {
        boolean endLoop = false;
        int counter = 0;
        AudioList forReturn = new AudioList();
        AudioList placeHolder = new AudioList();

        if (searchFor[0] != null || searchFor[0] != "")
        {
            do
            {
                // if the param is starts with
                if ( searchFor[ counter ].charAt( 0 ) == '^'
                        && searchFor[ counter ].length() > 1 )
                {
                    placeHolder = 
                            startsWith( searchFor[ counter ].substring( 1,
                                    searchFor[ counter ].length() ), param );
                }
                // if the param is ends with
                else if ( searchFor[ counter ].charAt( 0 ) == '$'
                        && searchFor[ counter ].length() > 1 )
                {
                    placeHolder = 
                            endsWith( searchFor[ counter ].substring( 1,
                                    searchFor[ counter ].length() ), param );
                }
                // if the param is not
                else if (searchFor[counter].length() > 2 && 
                        searchFor[counter].substring(0, 2).equals( "!(" ) )
                {
                    placeHolder = notEqualTo(
                            searchFor[ counter ].substring( 2,
                                    searchFor[ counter ].length() - 1 ), param );
                    
                    placeHolder = difference(placeHolder);

                }
                // if the param is contains
                else
                {
                    placeHolder = 
                            contains( searchFor[ counter ].substring( 0,
                                    searchFor[ counter ].length() ), param );
                }
                
                searchList = new AudioList();
                
                for (int i = 0; i < placeHolder.size(); i++)
                    searchList.add( placeHolder.get( i ) );
                
                

                counter ++;
                
                if (counter >= searchFor.length)
                    endLoop = true;
                else if (searchFor[counter] == null)
                    endLoop = true;
                else if (!searchFor[counter].equals("") )
                    endLoop = true;


            } while ( !endLoop);
        }
        
         return forReturn;

    }


/***************************** Private Methods*********************************/
    

    private AudioList endsWith(String searchFor, String param)
    {
        AudioList forReturn = new AudioList();
        
        for (int i = 0; i < searchList.size(); i++)
        {
            if (searchList.get(i).getArtist().endsWith(searchFor) 
                    && param.equals("artist"))
            {
                forReturn.add( searchList.get( i ) );
            }
            
            if (searchList.get(i).getTitle().endsWith(searchFor) 
                    && param.equals("title"))
            {
                forReturn.add( searchList.get( i ) );
            }
            
            if (searchList.get(i).getAlbum().endsWith(searchFor)
                    && param.equals("album"))
            {
                forReturn.add( searchList.get( i ) );
            }
            
        } // end loop
        
        return forReturn;
        
    } // end method
    
    
    /**
     * Used to handle the contains searching function
     * 
     * @param searchFor
     * @param param
     */
    private AudioList contains(String searchFor, String param)
    {
        AudioList forReturn = new AudioList();
        
        for (int i = 0; i < searchList.size(); i++)
        {
            if (searchList.get(i).getArtist().contains(searchFor) 
                    && param.equals("artist"))
            {
                forReturn.add( searchList.get( i ) );
            }
            
            if (searchList.get(i).getTitle().contains(searchFor) 
                    && param.equals("title"))
            {
                forReturn.add( searchList.get( i ) );
            }
            
            if (searchList.get(i).getAlbum().contains(searchFor)
                    && param.equals("album"))
            {
                forReturn.add( searchList.get( i ) );
            }
            
        } // end loop
        
        return forReturn;
        
    } // end method
    
  
    /**
     * Get the difference between this set and another - return the result
     * as a set
     * 
     * @param other
     * @return the difference set
     */
    private AudioList difference( AudioList other )
    {
        AudioList difference = new AudioList();
        
        for ( int i = 0; i < searchList.size(); i++ )
            if ( !other.contains( searchList.get( i ) ) )
                difference.add( searchList.get( i ) );   
        
        return difference;

    } // method difference
    
    
    private AudioList notEqualTo( String searchFor, String param)
    {
        AudioList forReturn = new AudioList();

        // if the param is starts with
        if ( searchFor.charAt(0) == '^' )
        {
            forReturn = startsWith( searchFor.substring( 1,
                    searchFor.length() ), param );
        }
        // if the param is ends with
        else if (searchFor.charAt(0) == '$')
        {
            forReturn = endsWith( searchFor.substring( 1,
                    searchFor.length() ), param );
        }
        // if the param is contains
        else
        {
            forReturn = contains( searchFor.substring( 1,
                    searchFor.length() ), param );
        }
        
        return forReturn;
    }


    /**
     * getSearchInformation - is used to narrow down the AudioList to fit
     * the critera of what is being searched for.
     * 
     * @param string
     * @param list
     */
    private String[] getSearchCriteria(String param)
    {
        int counter = 0;
        String placeHolder = "";
        String[] searchString = new String[20];
        
        if (param != null && param != "")
        {
            do
            {   
                view.display(param);
                placeHolder = view.getInput(false, "");
                
                 if (!placeHolder.equals( "" ) )
                     searchString[counter] = placeHolder;
                         
                counter++;
                
            }
            while(searchString[counter -1] != null );

        }
        
        return searchString;

    } // end method
    
    
    /**
     * showHeader - shows the header for the edit screen
     */
    private void showEditHeader()
    {
        view.clearScreen();
        view.centerText("Search Audio Files");
        view.displayLine();
        view.centerText("^ = starts with, $ = ends with, !() = not, " +
                "no symbol = contains");
        view.displayLine();
        
    } // end method

    
    /**
     * Used to run the search function of the search class. Makes all of the
     * method calls as well as holder the search criteria.
     * 
     */
    private void startSearch()
    { 
        String[] album = new String[20];
        String[] artist = new String[20];
        String[] title = new String[20];
        
        // show the header on the user input screen
        showEditHeader();
        
        // get all of the search critera from the user
        artist = getSearchCriteria("Artist: ");
        title = getSearchCriteria("Title: ");
        album = getSearchCriteria("Album: ");
        
        // get a list of all thing that match the criteria
        if (artist[0] != null)
            addFiles(artist, "artist");
        
        if (title[0] != null)
            addFiles(title, "title");
        
        if (album[0] != null)
            addFiles(album, "album");
        
        // if all three responce are null, go back to main list
        if (artist[0] == null)
            if (album[0] == null)
                if (title[0] == null)
                    searchList = null;
        
    } // end method
    
    
    private AudioList startsWith(String searchFor, String param)
    {
        AudioList forReturn = new AudioList();
        
        for (int i = 0; i < searchList.size(); i++)
        {
            if ( searchList.get( i ).getArtist().startsWith( searchFor ) 
                    && param.equals( "artist" ) )
            {
                forReturn.add( searchList.get( i ) );
            }
            
            if ( searchList.get( i ).getTitle().startsWith( searchFor ) 
                    && param.equals( "title" ) )
            {
                forReturn.add( searchList.get( i ) );
            }
            
            if ( searchList.get( i ).getAlbum().startsWith( searchFor )
                    && param.equals( "album" ) )
            {
                forReturn.add( searchList.get( i ) );
            }
            
        } // end loop
        
        return forReturn;
        
    } // end method
    
    
} // end class

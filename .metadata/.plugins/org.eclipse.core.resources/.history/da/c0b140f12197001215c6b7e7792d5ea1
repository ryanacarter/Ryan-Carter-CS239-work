package Model;

import static org.junit.Assert.*;

import org.junit.*;

/**
 * Test class for MP3File
 * 
 * Acknowledgements:  I acknowledge that I have neither given nor 
 *                                  received assistance for this assignment 
 *                                   except as noted below:
 *                                   
 *                                   none
 *                                   
 *                                   
 * Modifications: PA2 (2/14/2013)
 * - added methods to test getSortString()
 * - added methods to test setTrack(String)
 * 
 * Modifications: RAC PA3 (3/29/2013)
 *  - adapted for MP3Files
 *   
 * @author Michael Norton
 * @author Ryan Carter
 * @version PA3 (3/29/2013), PA2 (2/14/2013), PA1 (1/24/2013)
 *
 */
public class MP3FileTest
{
    /**
     * Test method for {@link AudioFile#AudioFile()} 
     * - test the default constructor
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testAudioFile()
    {
        MP3File file = new MP3File();
        assertTrue( file.getAlbum().length() == 0 );
        assertTrue( file.getArtist().length() == 0 );
        assertTrue( file.getTitle().length() == 0 );
        assertTrue( file.getTrack() == 0 );
        assertTrue( file.getPathName().length() == 0 );
        assertTrue( file.getLabel().length() == 0 );
        assertTrue( file.getBitrate() == 0 );
        
    } // method testAudioFile



    /**
     * Test method for {@link AudioFile#AudioFile(java.lang.String, 
     *     java.lang.String, java.lang.String, int)}.
     *  -- test the explicit vvalue constructor
     *  
     *  **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testAudioFileExplicitGood()
    {
        MP3File file = new MP3File("abc", "def", "efg", 9, "/f/", "lab", 256 );
        assertTrue( file.getAlbum().equals( "efg" ) );
        assertTrue( file.getArtist().equals( "abc" ) );
        assertTrue( file.getTitle().equals( "def" ) );
        assertTrue( file.getTrack() == 9 );
        assertTrue( file.getPathName().equals( "/f/" ) );
        assertTrue( file.getLabel().equals( "lab" ) );
        assertTrue( file.getBitrate() == 256 );

    } //method testAudioFileExplicitGood

    
    /**
     * Test method for {@link AudioFile#AudioFile(java.lang.String, 
     *      java.lang.String, java.lang.String, int)}
     * - Test explicit value constructor with null & invalid data
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testAudioFileExplicitBad()
    {
        MP3File file = new MP3File( null, null, null, 100, null, null, 103 );
        assertNotNull( file.getAlbum() );
        assertTrue( file.getAlbum().length() == 0 );
        assertNotNull( file.getArtist() );
        assertTrue( file.getArtist().equals( "No Artist" ) );
        assertNotNull( file.getTitle() );
        assertTrue( file.getTitle().equals( "No Title" ) );
        assertTrue( file.getTrack() == 0 );
        assertTrue( file.getPathName().equals( "No Path" ) );
        assertTrue( file.getLabel().equals( "No Label" ) );
        assertTrue( file.getBitrate() == 103 );

    } // method testAudioFileExplicitBad
    
    
    /**
     * The method for {@link AudioFile#AudioFile(java.lang.String, 
     *      java.lang.String, java.lang.String, int)}
     *      - test for good equals method
     *      
     * **RAC (PA3) - added method
     */
    @Test
    public void testGoodEquals()
    {
        AudioFile file1 = new MP3File("abc", "def", "ghi", 0, "jkl", "mn", 19);
        AudioFile file2 = new MP3File("abc", "def", "ghi", 0, "jkl", "mn", 19);
        
        assertTrue( file1.equals( file2 ) );
    }
    
    /**
     * The method for {@link AudioFile#AudioFile(java.lang.String, 
     *      java.lang.String, java.lang.String, int)}
     *      - test for bad equals method
     *      
     * **RAC (PA3) - added method
     */
    @Test
    public void testBadEquals()
    {
        AudioFile file1 = new MP3File("abc", "def", "ghi", 0, "jkl", "mn", 19);
        AudioFile file2 = new MP3File("abc", "def", "ghi", 0, "jl", "mn", 19);
        
        assertFalse( file1.equals( file2 ) );
    }
    
    
    /**
     * The method for {@link AudioFile#AudioFile(java.lang.String, 
     *      java.lang.String, java.lang.String, int)}
     *      - test for wrongAudioType equals method
     *      
     * **RAC (PA3) - added method
     */
    @Test
    public void testWrongTypeEquals()
    {
        AudioFile file1 = new MP3File("abc", "def", "ghi", 0, "jkl", "mn", 19);
        AudioFile file2 = new WavFile("abc", "def", "ghi", 0, "jfuh", 19);
        
        assertFalse( file1.equals( file2 ) );
        assertFalse (file2.equals( file1 ) );
    }
    
    
    /**
     * Test method for {@link AudioFile#getPathName()} - test sort string 
     * for normal AudioFile with album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testGetPathName()
    {
        AudioFile mp3 = new MP3File ("asd", "asd", "ad", 1, "this/is/the/path",
                "aklsdf", 2834);
        
        AudioFile wav = new WavFile ( "", "", "", 0, "the new path", 12 );
        
        assertEquals("this/is/the/path", mp3.getPathName() );
        assertEquals("the new path", wav.getPathName() );
        
        
    }


    /**
     * Test method for {@link AudioFile#getSortString()} - test sort string 
     * for normal AudioFile with album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testGetSortStringNormalWithAlbum()
    {
        char delim = (char)0;
        MP3File file = new MP3File("abc", "def", "efg", 9, "he", "aefae", 0 );
        String expected = "abc" + delim + "efg" + delim + "09" + delim +
                "def";
        assertTrue( file.getSortString().equals( expected ) );
        
    } // method testGetSortStringNormalWithAlbum
    

    /**
     * Test method for {@link AudioFile#getSortString()} - test sort string 
     * for normal AudioFile without album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testGetSortStringNormalWithoutAlbum()
    {
        char delim = (char)0;
        MP3File file = new MP3File("abc", "def", null, 0, "Labe", "asdf", 0 );
        String expected = "abc" + delim + "~~~~~~~~~~~~" + delim + "~~" +
                delim + "def";
        System.out.println( file.getSortString() );
        assertTrue( file.getSortString().equals( expected ) );
                
    } // method testGetSortStringNormalWithoutAlbum()
    

    /**
     * Test method for {@link AudioFile#getSortString()} - test sort string 
     * for abnormal AudioFile with album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testGetSortStringAbnormalWithAlbum()
    {
        char delim = (char)0;
        MP3File file = new MP3File( null, null, "abc", 0 , "laksdf", "asdf", 0);
        String expected = "no artist" + delim + "abc" + delim + "~~" +
                delim + "no title";
        System.out.println( file.getSortString() );
        assertTrue( file.getSortString().equals( expected ) );
                
    } // method testGetSortStringAbnormalWithAlbum
    

    /**
     * Test method for {@link AudioFile#setAlbum()} - test bad album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetAlbumBad()
    {
        MP3File file = new MP3File();
        file.setAlbum( null );
        
        assertNotNull( file.getAlbum() );
        assertTrue( file.getAlbum().length() == 0 );

    } // method testSetAlbumBad



    /**
     * Test method for {@link AudioFile#setAlbum()} - test good album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetAlbumGood()
    {
        MP3File file = new MP3File();
        file.setAlbum( "Album" );
        
        assertNotNull( file.getAlbum() );
        assertTrue( file.getAlbum().equals( "Album") );

    } // method testSetAlbumGood



    /**
     * Test method for {@link AudioFile#setArtist()} - test bad artist
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetArtistBad()
    {
        MP3File file = new MP3File();
        file.setArtist( null );
        
        assertNotNull( file.getArtist() );
        assertTrue( file.getArtist().equals( "No Artist" ) );
    
    } // method testSetTitleBad



    /**
     * Test method for {@link AudioFile#setArtist()} - gest good artist
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetArtistGood()
    {
        MP3File file = new MP3File();
        file.setArtist( "Artist" );
        
        assertNotNull( file.getArtist() );
        assertTrue( file.getArtist().equals( "Artist") );

    } // method testSetArtistGood



    /**
     * Test method for {@link AudioFile#setTitle()} - test bad title
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTitleBad()
    {
        MP3File file = new MP3File();
        file.setTitle( null );
        
        assertNotNull( file.getTitle() );
        assertTrue( file.getTitle().equals( "No Title" ) );

    } // method testSetTitleBad



    /**
     * Test method for {@link AudioFile#setTitle()} - set good title
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTitleGood()
    {
        MP3File file = new MP3File();
        file.setArtist( "Title" );
        
        assertNotNull( file.getTitle() );
        assertTrue( file.getArtist().equals( "Title") );

    } // method testSetTitleGood


    /**
     * Test method for {@link AudioFile#setTrack()} - set track too high
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackAfterLast()
    {
        MP3File file = new MP3File();
        file.setTrack( 50 );
        file.setTrack( 100 );
        assertTrue( file.getTrack() == 50 );

    } // method testSetTrackAfterLast


    /**
     * Test method for {@link AudioFile#SetTrack()} - test track too low
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackBeforeFirst()
    {
        MP3File file = new MP3File();
        file.setTrack( 50 );
        file.setTrack( 0 );
        assertTrue( file.getTrack() == 50 );

    } // method testSetTrackBeforeFirst

    
    /**
     * Test method for {@link AudioFile#SetTrack()} - test set first track
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackFirst()
    {
        MP3File file = new MP3File();
        file.setTrack( 20 );
        file.setTrack( 1 );
        assertTrue( file.getTrack() == 1 );

    } // method testSetTrackFirst



    /**
     * Test method for {@link AudioFile#SetTrack()} - test set last track
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackLast()
    {
        MP3File file = new MP3File();
        file.setTrack( 20 );
        file.setTrack( 99 );
        assertTrue( file.getTrack() == 99 );

    } // method testSetTrackLast


    /**
     * Test method for {@link AudioFile#SetTrack()} - test set middle track
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackMiddle()
    {
        MP3File file = new MP3File();
        file.setTrack( 20 );
        file.setTrack( 50 );
        assertTrue( file.getTrack() == 50 );

    } // method testSetTrackMiddle


    /**
     * Test method for {@link AudioFile#SetTrack(Java.lang.String)} - test set 
     * empty track
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackWithStringEmpty()
    {
        MP3File file = new MP3File();
        file.setTrack( "100" );
        file.setTrack( "" );
        assertTrue( file.getTrack() == 0 );
        
    } // method testSetTrackWithStringEmpty
    
    
    /**
     * Test method for {@link AudioFile#SetTrack(Java.lang.String)} - test set 
     * valid track
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackWithStringGood()
    {
        MP3File file = new MP3File();
        file.setTrack( "50" );
        file.setTrack( "" );
        assertTrue( file.getTrack() == 50 );
        
    } // method testSetTrackWithStringGood
    
    
    /**
     * Test method for {@link AudioFile#SetTrack(Java.lang.String)} - test set 
     * null track
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testSetTrackWithStringNull()
    {
        MP3File file = new MP3File();
        file.setTrack( "50" );
        file.setTrack( null );
        assertTrue( file.getTrack() == 50 );
        
    } // method testSetTrackWithStringNull
    
    
    /**
     * Test method for {@link java.lang.Object#toString()} - test toString
     * with album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testToStringWithAlbum()
    {
        MP3File file = new MP3File( "Abc", "Def", "Ghi", 90, "asdfD", "Dase", 0 );
        assertTrue( file.toString().equals( "Abc, Def (Ghi)") );

    } // method testToStringWithAlbum


    /**
     * Test method for {@link java.lang.Object#toString()} - test toString
     * without album
     * 
     * **RAC (PA3) - changes audioFile type to MP3Files
     */
    @Test
    public void testToStringWithoutAlbum()
    {
        MP3File file = new MP3File( "Abc", "Def", "", 90, "asdfD", "Dase", 0 );
        assertTrue( file.toString().equals( "Abc, Def") );
    
    } // method testToStringWithoutAlbum

} // class AudioFileTest
